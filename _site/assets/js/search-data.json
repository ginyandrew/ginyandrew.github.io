{
  
  "0": {
    "title": "ClamAV",
    "content": "ClamAV . . What is ClamAV ? | How to Implement ClamAV in Java ? | What is ClamAV ? . an open source antivirus engine (free!) by Cisco. can detect malware/ virus. . How to Implement ClamAV in Java ? . download ClamAV and install. (C: program files clamAV) | Open Powershell as an administrator (in clamAV) and run the CLs below. cd &quot;c: program files clamav&quot; copy . conf_examples freshclam.conf.sample . freshclam.conf copy . conf_examples clamd.conf.sample . clamd.conf write.exe . freshclam.conf # change &quot;Example&quot; to #&quot;Example&quot; and change config if you need write.exe . clamd.conf # change &quot;Example&quot; to #&quot;Example&quot; and change config if you need . freshclam.exe # it downloads database (database/ .cvd ) . | Open a command line as an administrator (in clamAV) and run the CL below. clamd.exe install # it starts ClamAV service in your machine. (probably 127.0.0.1 / port no. is in clamd.conf) . | Download the jars of required libraries below and add to /lib in your project (or add Maven dependency to pom.xml) org.apache.commons.logging | commons-io | ClamAV Client in maven (clamav-client-1.0.0.jar) | . | implement the java code File initialFile = new File(&quot;resource/sample.txt&quot;); InputStream fis = new FileInputStream(initialFile) ClamAVClient clamAVClient = new ClamAVClient(&quot;127.0.0.1&quot;, 3310, 200); // &quot;ClamAV host url&quot;, ClamAV port number, socket time out max byte[] bts = clamAVClient.scan (fis ); // byte[] scan(InputStream is) // scanResult: true - no virus/ false - virus detected boolean scanResult = ClamAVClient.iscleanReply(bts); // static boolean isCleanReply(byte[] reply) . |",
    "url": "http://localhost:4000/docs/30_Others/01_clamAV/",
    "relUrl": "/docs/30_Others/01_clamAV/"
  }
  ,"1": {
    "title": "Git basic command line",
    "content": "Git Command line . . Start | Advanced how to revert back to particular commit | exclude a file from git add | | Branch | Disconnect remote repo from local repo | Start . git init . git clone URL . git remote add origin URL connect local repo to remote repo (URL) . git add . all files in the folder . git add -A only changed files . git status . git commit -m &quot;comment&quot; staging . git reset cancel staging . git push origin master . . Advanced . how to revert back to particular commit . get commit number which you want to go back to . $ git log . result . commit 6843810259be199b6ce28529db23eef77b5f75c8 (HEAD -&gt; master, origin/master, origin/HEAD) Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:28:08 2020 -0400 customize jekyll theme code color commit 20228c91928378c63d7d751378073480e9a44db6 Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:18:06 2020 -0400 update code css commit 65f84e5039bafd09c3c048a1db083f8ed1fe3f0c Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:14:46 2020 -0400 update config . exclude a file from git add . git reset HEAD [filename] // if filename is skipped, all staging is reset. . if you want to go back to 2nd commit (starting 20228c91) | . git reset --hard 20228c91 git push -f origin master(branch name) . Warning it removes entire commit history . Branch . git branch check which branch im in . git branch BRANCHNAME create a new branch . git checkout BRANCHNAME switch remote repo to the branch . git push origin BRANCHNAME now push to the switched branch only . . Disconnect remote repo from local repo . It removes .git file to disconnect remote repo from local repo . find ./ -name &quot;.git&quot; | xargs rm -Rf find ./ -name &quot;.gitignore&quot; | xargs rm -Rf .",
    "url": "http://localhost:4000/docs/20_GitCL/01_git_basic_commandline/",
    "relUrl": "/docs/20_GitCL/01_git_basic_commandline/"
  }
  ,"2": {
    "title": "Basic",
    "content": "Java - Basic . . Java | Java .",
    "url": "http://localhost:4000/docs/10_Java/01_java_basic/",
    "relUrl": "/docs/10_Java/01_java_basic/"
  }
  ,"3": {
    "title": "JS Basic",
    "content": "Javascript - Basic . . useful methods | useful methods . Split - String to Array | . var str = &quot;How are you doing today?&quot;; var res = str.split(&quot; &quot;); .",
    "url": "http://localhost:4000/docs/14_Javascript/01_js_basic/",
    "relUrl": "/docs/14_Javascript/01_js_basic/"
  }
  ,"4": {
    "title": "Basic",
    "content": "Spring - Basic . . Annotation ResponseEntity | | JPA Difference Between CrudRepository and JPARepository | | Annotation . ResponseEntity . Equal to @ResponseBody, it turns return value to JSON(default) or XML format. . . JPA . Difference Between CrudRepository and JPARepository . CrudRepository and JPA repository both are the interface of the spring data repository library. JPA repository extends CrudRepository and PagingAndSorting repository. It inherits some finders from crud repository such as findOne, gets and removes an entity. . . Choose CrudRepository for simple CRUD only. Choose JPARepository for paging/sorting/other JPA functionalities. . . reference www.tutorialspoint.com .",
    "url": "http://localhost:4000/docs/18_Spring/01_spring_basic/",
    "relUrl": "/docs/18_Spring/01_spring_basic/"
  }
  ,"5": {
    "title": "Basic",
    "content": "Vue - Basic . . Vue Life Cycle | Vue Life Cycle . Creation : before Component is added to DOM / can’t access to this.$el beforeCreate - data/events are not set up yet, can’t access to them | created - now can access to data/event | . | Mounting beforeMount | mounted | . | Updating beforeUpdate | . | Descruction beforeDestroy | destroyed | . |",
    "url": "http://localhost:4000/docs/15_Vue/01_vue_basic/",
    "relUrl": "/docs/15_Vue/01_vue_basic/"
  }
  ,"6": {
    "title": "Apply Jekyll to Git Page",
    "content": "Git Command line . . what is Jekyll? | Install Jekyll | Apply jekyll theme | . what is Jekyll? . A Static complier. It complies .md (markdown), .yml to run in WEB. it is built in Ruby. . . Install Jekyll . (1) Install Ruby . go to Ruby and download the most stable version Ruby+Devkit . Double click and install. . (2) Verify the installation . ruby --version . (3) Install Jekyll . gem install Jekyll gem install bundler . (4) add ‘admin’ plug in . open ‘Gemfile’ file from the root folder and add the line below at the bottom . gem &#39;jekyll-admin&#39;, group: :jekyll_plugins . (5) deploy Jekyll again to apply the new admin plug in, and check at admin page . bundle install jekyll serve . . Apply jekyll theme . Search ‘Jekyll free theme’ and download git source , unzip the files and copy all files to the root folder of the github page project. . Copy all files from theme project to your root project folder, except for _config.xml and gemfile. . compare config.xml and gemfile and edit the original accordingly. . once copy is completed, compile again and run it. . bundle install jekyll serve . Git deploys everytime commit is done. If deployment fails, it sends an warning email to alarm user failure of the deployment with the reason. .",
    "url": "http://localhost:4000/docs/20_GitCL/02_jekyll_install_and_theme/",
    "relUrl": "/docs/20_GitCL/02_jekyll_install_and_theme/"
  }
  ,"7": {
    "title": "Annotation",
    "content": "Annotation . . Annotations | Annotations . GetMapping | .",
    "url": "http://localhost:4000/docs/18_Spring/02_spring_annotation/",
    "relUrl": "/docs/18_Spring/02_spring_annotation/"
  }
  ,"8": {
    "title": "Axios",
    "content": "Vue - Axios . . What is Axios ? | Axios basic how to access to ‘this’ in axios | | What is Axios ? . one of HTTP clicnt library. It helps to use Ajax request in Vue.js . Ajax (Axynchronous javascript And Xml) - loading data by using XmlHttpRequest (API transferring data between server-web browser) object | . . Axios basic . how to access to ‘this’ in axios . example | . data: function(){ return { param: &quot;&quot;} }, methods() { getFnc: function(){ var self = this; axios.get(&quot;url&quot;).then (function(response){ self.param = response.data; }) } } .",
    "url": "http://localhost:4000/docs/15_Vue/02_vue_axios/",
    "relUrl": "/docs/15_Vue/02_vue_axios/"
  }
  ,"9": {
    "title": "File I/O",
    "content": "Java - File I/O . . what is File I/O | what is File I/O . example . public void upload(MultipartFile file) { file.getOriginalFilename(); file.getSize(); try { FileOutputStream fos = new FileOutputStream(&quot;D:/02_mysite/workspace/NegobillBoot/src/main/resources/static/image/&quot;+ file.getOriginalFilename()); InputStream is = file.getInputStream(); int readCount = 0; byte[] buffer = new byte[1024]; while ((readCount = is.read(buffer)) != -1 ) { fos.write(buffer, 0, readCount); } } catch (Exception e) { throw new RuntimeException( e.getCause()); // TODO: handle exception } } .",
    "url": "http://localhost:4000/docs/10_Java/05_java_file/",
    "relUrl": "/docs/10_Java/05_java_file/"
  }
  ,"10": {
    "title": "JS ES6",
    "content": "Javascript - ES6 . . Promise | Promise . Javascript is single thread and Asynchronous processing model . console.log(&#39;1&#39;); axios.get(&#39;http://localhost:8081/test&#39;).then (function (response){ console.log(2) }) console.log(&#39;3&#39;); . Result ( while waiting for 2nd task to be completed, it continues to move on) . 1,3,2 . to prevent this, we use callback, but it makes using try-catch very difficult. . Promise is a library to resolve this issue, and now ES6 supports it. . . Promise example | . // create promise const thePm = function(value){ return new Promise(function (resolve, reject){ if (value) { resolve(&quot;resolve! &quot;); } else { reject (&quot;reject! &quot;); } }); } // execute promise thePm(true).then(function(result){ console.log(result); // it prints &#39;resolve!&#39; }, function (err){ console.log(err); // it prints &#39;reject!&#39; } ) . Promise example 2 | . // before Promise applied function getData(callbackFunc) { $.get(&#39;http://localhost:8081/test&#39;, function(response) { callbackFunc(response); // received the data from server, and pass to callback function }); } getData(function(result){ console.log(result); // response above is sent to this &#39;result&#39; }) // after Promise applied function getData(callbackFunc) { return new Promise(function(resolve, reject){ // new Promise() is added $.get(&#39;http://localhost:8081/test&#39;, function(response) { resolve(response); // once data is received, call resolve() method. }); }); } getData().then (function(result){ //&#39;then&#39; is added. once getData() above is completed, then- is executed. console.log(result); // response above is sent to this &#39;result&#39; }) .",
    "url": "http://localhost:4000/docs/14_Javascript/05_js_es6/",
    "relUrl": "/docs/14_Javascript/05_js_es6/"
  }
  ,"11": {
    "title": "Security",
    "content": "Java - Security . . XXS (Sross Site Scripting) Attach | XXS (Sross Site Scripting) Attach . Users enter the input value with HTML tag (with ‘&lt; script //&gt;’) that can be executed to attack. To dissable, it either needs to ‘escape’ the HTML tag or assigns the whitelist of allowed inputs and prohibits rest of inputs. . these methods can be implemented either on the client-side(front end) or the server-side (back end). . Java (server-side) implementation example . add apache-commons-text dependency | . &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-text&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; . result | . String escaped = StringEscapeUtils.escapeHtml4(param); // when param is &#39;&lt;script&gt;&#39;, it is transformed to *&amp;lt;script&amp;gt;* .",
    "url": "http://localhost:4000/docs/10_Java/10_java_security/",
    "relUrl": "/docs/10_Java/10_java_security/"
  }
  ,"12": {
    "title": "JSON",
    "content": "Javascript - JSON . . JSON(JavaScript Object Notation) Methods | | JSON(JavaScript Object Notation) . Methods . JSON.stringify(value) . it turns a JavaScript object into JSON text in a String format. . JSON.parse(value) . it turns JSON text into _Javascript object .",
    "url": "http://localhost:4000/docs/14_Javascript/10_js_json/",
    "relUrl": "/docs/14_Javascript/10_js_json/"
  }
  ,"14": {
    "title": "Git and CL",
    "content": "Git and Command Line . All about Git and Command Line. .",
    "url": "http://localhost:4000/docs/20_GitCL",
    "relUrl": "/docs/20_GitCL"
  }
  ,"15": {
    "title": "Home",
    "content": "Focus on writing good documentation . All about code, project, and daily life . . Getting started .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"16": {
    "title": "Java",
    "content": "Java . All about Java .",
    "url": "http://localhost:4000/docs/10_Java",
    "relUrl": "/docs/10_Java"
  }
  ,"17": {
    "title": "Javascript",
    "content": "Javascript . All about Javascript and ES6 .",
    "url": "http://localhost:4000/docs/14_Javascript",
    "relUrl": "/docs/14_Javascript"
  }
  ,"18": {
    "title": "Others",
    "content": "Others . Anything I learn .",
    "url": "http://localhost:4000/docs/30_Others",
    "relUrl": "/docs/30_Others"
  }
  ,"19": {
    "title": "Spring",
    "content": "Spring . All about Spring framework .",
    "url": "http://localhost:4000/docs/18_Spring",
    "relUrl": "/docs/18_Spring"
  }
  ,"20": {
    "title": "Vue JS",
    "content": "Vue . All about Vue.js .",
    "url": "http://localhost:4000/docs/15_Vue",
    "relUrl": "/docs/15_Vue"
  }
  
}