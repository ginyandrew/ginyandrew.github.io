{
  
  "0": {
    "title": "ClamAV",
    "content": "ClamAV . . What is ClamAV ? | How to Implement ClamAV in Java ? | What is ClamAV ? . an open source antivirus engine (free!) by Cisco. can detect malware/ virus. . How to Implement ClamAV in Java ? . download ClamAV and install. (C: program files clamAV) | Open Powershell as an administrator (in clamAV) and run the CLs below. cd &quot;c: program files clamav&quot; copy . conf_examples freshclam.conf.sample . freshclam.conf copy . conf_examples clamd.conf.sample . clamd.conf write.exe . freshclam.conf # change &quot;Example&quot; to #&quot;Example&quot; and change config if you need write.exe . clamd.conf # change &quot;Example&quot; to #&quot;Example&quot; and change config if you need . freshclam.exe # it downloads database (database/ .cvd ) . | Open a command line as an administrator (in clamAV) and run the CL below. clamd.exe install # it starts ClamAV service in your machine. (probably 127.0.0.1 / port no. is in clamd.conf) . | Download the jars of required libraries below and add to /lib in your project (or add Maven dependency to pom.xml) org.apache.commons.logging | commons-io | ClamAV Client in maven (clamav-client-1.0.0.jar) | . | implement the java code File initialFile = new File(&quot;resource/sample.txt&quot;); InputStream fis = new FileInputStream(initialFile) ClamAVClient clamAVClient = new ClamAVClient(&quot;127.0.0.1&quot;, 3310, 200); // &quot;ClamAV host url&quot;, ClamAV port number, socket time out max byte[] bts = clamAVClient.scan (fis ); // byte[] scan(InputStream is) // scanResult: true - no virus/ false - virus detected boolean scanResult = ClamAVClient.iscleanReply(bts); // static boolean isCleanReply(byte[] reply) . |",
    "url": "http://localhost:4000/docs/30_Others/01_clamAV/",
    "relUrl": "/docs/30_Others/01_clamAV/"
  }
  ,"1": {
    "title": "Git basic command line",
    "content": "Git Command line . . Start | Advanced how to revert back to particular commit (eg. to 2nd commit, starting 20228c91) | Unstaging (Reset git add if it’s not pushed.) | | Branch | Disconnect remote repo from local repo | Start . git init . git clone URL . git remote add origin URL connect local repo to remote repo (URL) . git add . all files in the folder . git add -A only changed files . git status . git commit -m &quot;comment&quot; staging . git reset cancel staging . git push origin master . . Advanced . how to revert back to particular commit (eg. to 2nd commit, starting 20228c91) . get commit number which you want to go back to . $ git log . result . commit 6843810259be199b6ce28529db23eef77b5f75c8 (HEAD -&gt; master, origin/master, origin/HEAD) Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:28:08 2020 -0400 #customize jekyll theme code color commit 20228c91928378c63d7d751378073480e9a44db6 Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:18:06 2020 -0400 #update code css commit 65f84e5039bafd09c3c048a1db083f8ed1fe3f0c Author: ginyandrew &lt;ginyandrew@gmail.com&gt; Date: Mon May 25 10:14:46 2020 -0400 #update config . git reset --hard 20228c91 git push -f origin master(branch name) . Warning it removes entire commit history . Unstaging (Reset git add if it’s not pushed.) . git reset HEAD [filename] # if filename is skipped, all staging is reset. . . Branch . git branch check which branch im in . git branch BRANCHNAME create a new branch . git checkout BRANCHNAME switch remote repo to the branch . git push origin BRANCHNAME now push to the switched branch only . . Disconnect remote repo from local repo . It removes .git file to disconnect remote repo from local repo . find ./ -name &quot;.git&quot; | xargs rm -Rf find ./ -name &quot;.gitignore&quot; | xargs rm -Rf .",
    "url": "http://localhost:4000/docs/20_GitCL/01_git_basic_commandline/",
    "relUrl": "/docs/20_GitCL/01_git_basic_commandline/"
  }
  ,"2": {
    "title": "Basic",
    "content": "Java - Basic . . Java | Java .",
    "url": "http://localhost:4000/docs/10_Java/01_java_basic/",
    "relUrl": "/docs/10_Java/01_java_basic/"
  }
  ,"3": {
    "title": "JS Basic",
    "content": "Javascript - Basic . . useful methods | useful methods . Split - String to Array | . var str = &quot;How are you doing today?&quot;; var res = str.split(&quot; &quot;); .",
    "url": "http://localhost:4000/docs/14_Javascript/01_js_basic/",
    "relUrl": "/docs/14_Javascript/01_js_basic/"
  }
  ,"4": {
    "title": "Basic",
    "content": "Spring - Basic . . Annotation ResponseEntity | | JPA Difference Between CrudRepository and JPARepository | | Annotation . ResponseEntity . Equal to @ResponseBody, it turns return value to JSON(default) or XML format. . . JPA . Difference Between CrudRepository and JPARepository . CrudRepository and JPA repository both are the interface of the spring data repository library. JPA repository extends CrudRepository and PagingAndSorting repository. It inherits some finders from crud repository such as findOne, gets and removes an entity. . . Choose CrudRepository for simple CRUD only. Choose JPARepository for paging/sorting/other JPA functionalities. . . reference www.tutorialspoint.com .",
    "url": "http://localhost:4000/docs/18_Spring/01_spring_basic/",
    "relUrl": "/docs/18_Spring/01_spring_basic/"
  }
  ,"5": {
    "title": "How to set up Vue project",
    "content": "Vue - How to set up Vue Project . . Basic Vue Config setup | How to initiate a new Vue project | how to integrate Vue project in Spring boot | . Basic Vue Config setup . how to chage port number of vue-cli project : in webpack.config.js, . module: { devServer: { port: 9000} } . . How to initiate a new Vue project . check if vue is installed and version. if not installed, install it. . vue --version #@vue/cli 4.3.1 npm install -g @vue/cli vue create myProjectName #select &#39;default&#39; and all pre-set selected options and complete installing. . Once the installation is completed, you can run the Vue server. . npm run serve # DONE Compiled successfully in 3655ms4:40:06 PM #&lt;s&gt; [webpack.Progress] 100% # App running at: # - Local: http://localhost:8080/ # - Network: http://192.168.1.163:8080/ . Tada ~ . . . how to integrate Vue project in Spring boot . Once spring boot is initiated, move to SpringProjectName/src. In Src folder, initiate a new Vue Project. . Gin@DESKTOP- .. workspace/SpringProjectName/src (master) $ vue create vue-project-name # vue project is initiated. $ cd vue-project-name Gin@DESKTOP- .. workspace/SpringProjectName/src/vue-project-name (master) . now, set up where dist folder (compiled file of Vue project) will be created. . create a new file ‘vue.config.js’ in /ProjectName/src/vue-project-name (root folder of Vue project) with the json below. . module.exports= { outputDir: &quot;../main/resources/static&quot;, indexPath: &quot;../static/index.html&quot; } . now build the vue project. . npm run build . and you can see the dist folder with Vue compiled files in /src/main/resources/static folder. . . Now run the spring boot project. check the port number in application.properties file. . server.port=8081 . once Spring project is running, you can check at http://localhost:8081/index.html .",
    "url": "http://localhost:4000/docs/15_Vue/01_vue_howtosetup/",
    "relUrl": "/docs/15_Vue/01_vue_howtosetup/"
  }
  ,"6": {
    "title": "Docker and Jenkins",
    "content": "Docker and Jenkins . . What is Docker ? Why we use it? | What is Docker image ? | What is Docker ? Why we use it? . To use Program A (compatible with Oracle 9/ linux) and B (compatible with Oracle 10g/ Windows) and C (.. 11g) at the same time… multiple servers ? or Docker ? . A Docker container is an open source software development platform. while VM virtualizes an operating system (heavy), Docker runs processes in a container (light&amp;fast), a user space of the operating system. (piece of operating system) . What is Docker image ? . Docker image includes the files and configs required for the container. it has immutable properties. .",
    "url": "http://localhost:4000/docs/30_Others/02_Deploy/",
    "relUrl": "/docs/30_Others/02_Deploy/"
  }
  ,"7": {
    "title": "Apply Jekyll to Git Page",
    "content": "Git Command line . . what is Jekyll? | Install Jekyll | Apply jekyll theme | . what is Jekyll? . A Static complier. It complies .md (markdown), .yml to run in WEB. it is built in Ruby. . . Install Jekyll . (1) Install Ruby . go to Ruby and download the most stable version Ruby+Devkit . Double click and install. . (2) Verify the installation . ruby --version . (3) Install Jekyll . gem install Jekyll gem install bundler . (4) add ‘admin’ plug in . open ‘Gemfile’ file from the root folder and add the line below at the bottom . gem &#39;jekyll-admin&#39;, group: :jekyll_plugins . (5) deploy Jekyll again to apply the new admin plug in, and check at admin page . bundle install jekyll serve . . Apply jekyll theme . Search ‘Jekyll free theme’ and download git source , unzip the files and copy all files to the root folder of the github page project. . Copy all files from theme project to your root project folder, except for _config.xml and gemfile. . compare config.xml and gemfile and edit the original accordingly. . once copy is completed, compile again and run it. . bundle install jekyll serve . Git deploys everytime commit is done. If deployment fails, it sends an warning email to alarm user failure of the deployment with the reason. .",
    "url": "http://localhost:4000/docs/20_GitCL/02_jekyll_install_and_theme/",
    "relUrl": "/docs/20_GitCL/02_jekyll_install_and_theme/"
  }
  ,"8": {
    "title": "Annotation",
    "content": "Annotation . . Annotations | Annotations . GetMapping | .",
    "url": "http://localhost:4000/docs/18_Spring/02_spring_annotation/",
    "relUrl": "/docs/18_Spring/02_spring_annotation/"
  }
  ,"9": {
    "title": "Vue Basic",
    "content": "Vue - Basic . . What is directive? | Frequently used directive | Vue Component | Vue Props | Vue Emit | . What is directive? . a directive is some special token in the markup that tells the library to do something to a DOM element. it renders dom elements. . . Frequently used directive . v-if . &lt;div&gt; Hello &lt;span v-if=&quot;show&quot;&gt;show me if true&lt;/span&gt; &lt;/div&gt; . new Vue({ data: { show: false } }) . v-for . &lt;ul&gt; &lt;li v-for=&quot;item in items&quot;&gt;&lt;/li&gt; &lt;/ul&gt; . new Vue({ data: { items: [&#39;apple&#39;, &#39;banana&#39;, &#39;strawberry&#39;] } }) . v-bind . &lt;!-- why use v-bind, instead of { { } } ? : double mustach can&#39;t be used in HTML attribute.--&gt; &lt;a href=&quot;{ { link } }&quot;&gt;google link &lt;/a&gt; . &lt;div id=&quot;app&quot;&gt; &lt;a v-bind:href=&quot;link&quot;&gt;google link&lt;/a&gt; &lt;/div&gt; . //this is appropriate way to bind vue data in dom new Vue({ el: &quot;#app&quot;, data: { link:&quot;https://google.com&quot; } }) . v-model . &lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;text&quot; v-model=&quot;businessname&quot;&gt; { { businessname } } &lt;/div&gt; . /* while double mustach { { } } is one-way data binding (only reflecting data), v-model is two-way data binding and user input change vue data */ new Vue({ el: &quot;#app&quot;, data: { businessname: &quot;sandwichshop&quot; } }) . Vue Component . How to create component . // create &#39;header&#39; component. Vue.component(&#39;header&#39;, { // &#39;header&#39; - app-component name template: &#39;&lt;h1&gt;Top header component&lt;/h1&gt;&#39; }); . &lt;!-- now we insert the &#39;header&#39; component in single page application. --&gt; &lt;div id=&quot;app&quot;&gt; &lt;header&gt;&lt;/header&gt; &lt;/div&gt; &lt;!-- it will be rendered like this. --&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;Top header component&lt;/h1&gt; &lt;/div&gt; . Vue Props . Props is used to send data from parent to child component. . // parent component (app) - send &#39;message&#39; to childComponent. new Vue({ el: &#39;#app&#39;, components: { &#39;child-component&#39;: childComponent }, data: { message: &#39;this is message from parent component. &#39; } }) . // childComponent var childComponent = { props: [&#39;parentmessage&#39;], template: &#39;&lt;p&gt;{ { parentmessage } }&lt;/p&gt;&#39; } . &lt;div id=&quot;app&quot;&gt; &lt;child-component v-bind:parentmessage=&quot;message&quot;&gt;&lt;/child-component&gt; &lt;!-- it will print &#39;this is message from parent component.&#39; --&gt; &lt;/div&gt; . Vue Emit . Emit is used to send data from child to parent component. . . Original code js // parent component new Vue({ el: &#39;#app&#39;, components: { &#39;child-component&#39;: childComponent }, methods: { showAlert: function() { alert(&#39;child is sending this alert!&#39;); } } }) js // childComponent var childComponent = { methods: { sendEvent: function() { this.$emit(&#39;update&#39;); } } } html .",
    "url": "http://localhost:4000/docs/15_Vue/02_vue_basic/",
    "relUrl": "/docs/15_Vue/02_vue_basic/"
  }
  ,"10": {
    "title": "Linux Commandline",
    "content": "Linux CommandLine . . adduser _user123_ #user123 is the name of a new user #it will ask a password for user123 -aG sudo user123 # assign sudo privilege to user123 sudo su - user123 # switch a Terminal user to user123 sudo apt update #update apt sudo groupadd tomcat #create a new group &#39;tomcat&#39; curl -O http://miroors.../tomcat.tar.gz #URL of file download cd /temp # if starts with &#39;/&#39;, it&#39;s absolute path. (root)/temp ls -al / sudo mkdir /opt/tomcat #create &#39;tomcat&#39; folder in (root)/opt folder sudo tar xzvf apache-..tar.gz -C /opt/tomcat --strip-components=1 #install tomcat file (apache-..tar.gz) in /opt/tomcat folder chgrp --help #if wanna know how to use command line (eg- &#39;chrgp&#39;) , then check with --help sudo chgrp -R tomcat /opt/tomcat # assign the group of &#39;tomcat&#39; to sudo for all folders in /opt/tomcat ls /opt/tomcat sudo chmod -R g+r conf sudo chmod g+x conf sudo chown -R tomcat wepapps/ work/ temp/ logs/ sudo update-java-alternatives -l #check &#39;JAVA_HOME&#39; environmental variable in Linux sudo ufw allow 8080 #open firewall to port 8080 ip addr show #check ip address - inet sudo systemctl status tomcat #can check if tomcat is runnning or not sudo /opt/tomcat/bin/startup.sh tail -f /opt/tomcat/logs/catalina.-.log #log file name, it reads an active live log file sudo nano filename.txt #text editor sudo apt seaerch #search available apt packages sudo apt install notepadqq #install program by using apt (eg- notepad++) sudo ufw status # check firewall status with open ports sudo ufw allow 22 # it opens port 22 on firewall sudo ufw deny 22 # it closes port 22 on firewall ps -ef | grep java # it grabs pid of executed java sudo kill -9 &lt;pid&gt; . mysql . sudo service mysql start #start mysql server sudo service mysql restart #restart mysql server sudo mysql -u root -p #login mysql as root quit #exit mysql # create user &#39;username123&#39; at server1 and allow its access to server1. server2 can access to server1 by using &#39;username123&#39;. CREATE USER &#39;username123&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;some_password&#39;; GRANT ALL PRIVILEGES ON *.* TO &#39;username123&#39;@&#39;localhost&#39; WITH GRANT OPTION; CREATE USER &#39;username123&#39;@&#39;%&#39; IDENTIFIED BY &#39;some_password&#39;; GRANT ALL PRIVILEGES ON *.* TO &#39;username123&#39;@&#39;%&#39; WITH GRANT OPTION; . .",
    "url": "http://localhost:4000/docs/30_Others/03_LinuxCL/",
    "relUrl": "/docs/30_Others/03_LinuxCL/"
  }
  ,"11": {
    "title": "Deploy Boot+Vue",
    "content": "How to deploy Spring Boot + Vue project with external Tomcat . . Prepare physical server - Respberry PI 4 | Install Tomcat | Set up &amp; Build Spring Boot project | Set up &amp; Build Vue project | Prepare physical server - Respberry PI 4 . Once decided to use Raspberry PI, (chose it solely for ‘no extra cost’) need to know how to deploy it by using an external Tomcat… . Rasberry PI parts to purchase - RAS PI RASPBERRY PI 4 - 8GB | RAS PI 15W POWER SUPPLY WH | MICROCONN MICROCONN PI 4 ALM CASE | KING** 64GB MicroSD W/ADP CL10 (will become a main storage space for O/S…) | . | . Raspberry PI turns on when it’s plugged in automatically. Burn the OS installation image on the microSD card, and assemble the parts and plug it in the power. It has already wifi - . Install Tomcat . My java project uses the java ver. 11. so choose Tomcat version 9 or above. already had 1.8 installed but it caused some error, so removed 1.8… . Eclipse setting Properties -&gt; Java Compiler -&gt; compliance level ( set to 11) | Properties -&gt; Java Build Path -&gt; JavaSE-11 | . | . Set up &amp; Build Spring Boot project . pom.xml | . ... &lt;parent&gt; ... &lt;/parent&gt; &lt;!--SpringBoot should be built as a .jar.. --&gt; &lt;packaging&gt;jar&lt;/packaging&gt; ... &lt;properties&gt; &lt;java.version&gt;1.11&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; ... &lt;!-- these 2 dependencies cover JPA/Hibernate. Remove &#39;hibernate-core&#39; and &#39;hibernate-entitymanager&#39; to avoid conflict. --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--got some error since javax- was missing. added it as well --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;!-- To set the java version for compiler --&gt; &lt;configuration&gt; &lt;source&gt;1.11&lt;/source&gt; &lt;target&gt;1.11&lt;/target&gt; &lt;/configuration&gt; ... . MyApplication.java | . @SpringBootApplication public class MyApplication extends SpringBootServletInitializer{ // extends SpringBootServletInitializer for external deployment ... @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) { return builder.sources(MyApplication.class); } ... } . ..Repository.java | . @Repository // make sure Repository classes have the annotation &#39;repository&#39; public interface CareRepository extends JpaRepository&lt;CareVO, Integer&gt;{ ... . In Eclipse, Project -&gt; Run as -&gt; Run Configuration, empty Profiles and put ‘package’ in Goals . . Once the configuration is created, it can build jar in projectRoot/target folder. . . . copy the jar file into Tomcat/webapps folder. . . run Tomcat by using command line. . ... apache-tomcat-9.0.35 webapps&gt;java -jar NegobillBoot1-1.jar # jar file name in webapps. . . Set up &amp; Build Vue project . webpack.config.js | . module.exports = { entry: &#39;./src/main.js&#39;, output: { path: path.resolve(__dirname, &#39;./dist&#39;), publicPath: &#39;./dist/&#39;, // tomcat will look for build.js file in the child folder &#39;dist&#39; of the folder index.html located. filename: &#39;build.js&#39; }, ... . run the CL below to build .js files in /dist folder. . npm run build # it builds files in &#39;dist&#39; folder. . main.html, index.html and /dist are static files that will be deployed by Tomcat. . copy the static files into Tomcat folder. (inside webapps/projectName) . by using CommandLind, move to apache-tomcat-9.0.35 bin and run tomcat. . startup.bat # it starts tomcat shutdown.bat # it shutdown tomcat. . To run both services, added one more port into server.xml of Tomcat. (add one more service tag and change service name/ connector port/redirectPort/ and appBase.) . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt; ... &lt;!--first service for Spring boot--&gt; &lt;Service name=&quot;Catalina&quot;&gt; &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8442&quot; /&gt;... &lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;... &lt;/Service&gt; &lt;!--first service for Vue --&gt; &lt;Service name=&quot;Catalina2&quot;&gt; &lt;!--appBase should have full path of Tomcat&#39;s webapps folder --&gt; &lt;Connector port=&quot;9000&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;... &lt;Host name=&quot;localhost&quot; appBase=&quot;D:/...skip.../apache-tomcat-9.0.35/webapps/negobill&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;... &lt;/Service&gt; &lt;/Server&gt; . can access to the app at : localhost:9000/negobill(folder name in Tomcat webapps folder)/index.html . .",
    "url": "http://localhost:4000/docs/18_Spring/03_spring_deploy/",
    "relUrl": "/docs/18_Spring/03_spring_deploy/"
  }
  ,"12": {
    "title": "lifecycle",
    "content": "Vue lifecycle . . Begin | Begin . a | b | c | d |",
    "url": "http://localhost:4000/docs/15_Vue/03_vue_lifecycle/",
    "relUrl": "/docs/15_Vue/03_vue_lifecycle/"
  }
  ,"13": {
    "title": "Github Markdown",
    "content": "Github Markdown . . Languages supported by Github Markdown | Languages supported by Github Markdown . actionscript3 | apache | applescript | asp | brainfuck | c | cfm | clojure | cmake | coffee-script, coffeescript, coffee | cpp - C++ | cs | csharp | css | csv | bash | diff | elixir | erb - HTML + Embedded Ruby | go | haml | http | java | javascript | json | jsx | less | lolcode | make - Makefile | markdown | matlab | nginx | objectivec | pascal | PHP | Perl | python | profile - python profiler output | rust | salt, saltstate - Salt | shell, sh, zsh, bash - Shell scripting | sql | scss | sql | svg | swift | rb, jruby, ruby - Ruby | smalltalk | vim, viml - Vim Script | volt | vhdl | vue | xml - XML and also used for HTML with inline CSS and Javascript | yaml | .",
    "url": "http://localhost:4000/docs/30_Others/04_Markdown/",
    "relUrl": "/docs/30_Others/04_Markdown/"
  }
  ,"14": {
    "title": "Axios",
    "content": "Vue - Axios . . What is Axios ? | Axios basic how to access to ‘this’ in axios | | What is Axios ? . one of HTTP clicnt library. It helps to use Ajax request in Vue.js . Ajax (Axynchronous javascript And Xml) - loading data by using XmlHttpRequest (API transferring data between server-web browser) object | . . Axios basic . how to access to ‘this’ in axios . example | . data: function(){ return { param: &quot;&quot;} }, methods() { getFnc: function(){ var self = this; axios.get(&quot;url&quot;).then (function(response){ self.param = response.data; }) } } .",
    "url": "http://localhost:4000/docs/15_Vue/04_vue_axios/",
    "relUrl": "/docs/15_Vue/04_vue_axios/"
  }
  ,"15": {
    "title": "File I/O",
    "content": "Java - File I/O . . what is File I/O | what is File I/O . example . public void upload(MultipartFile file) { file.getOriginalFilename(); file.getSize(); try { FileOutputStream fos = new FileOutputStream(&quot;D:/02_mysite/workspace/NegobillBoot/src/main/resources/static/image/&quot;+ file.getOriginalFilename()); InputStream is = file.getInputStream(); int readCount = 0; byte[] buffer = new byte[1024]; while ((readCount = is.read(buffer)) != -1 ) { fos.write(buffer, 0, readCount); } } catch (Exception e) { throw new RuntimeException( e.getCause()); // TODO: handle exception } } .",
    "url": "http://localhost:4000/docs/10_Java/05_java_file/",
    "relUrl": "/docs/10_Java/05_java_file/"
  }
  ,"16": {
    "title": "JS ES6",
    "content": "Javascript - ES6 . . Promise | Promise . Javascript is single thread and Asynchronous processing model . console.log(&#39;1&#39;); axios.get(&#39;http://localhost:8081/test&#39;).then (function (response){ console.log(2) }) console.log(&#39;3&#39;); . Result ( while waiting for 2nd task to be completed, it continues to move on) . 1,3,2 . to prevent this, we use callback, but it makes using try-catch very difficult. . Promise is a library to resolve this issue, and now ES6 supports it. . . Promise example | . // create promise const thePm = function(value){ return new Promise(function (resolve, reject){ if (value) { resolve(&quot;resolve! &quot;); } else { reject (&quot;reject! &quot;); } }); } // execute promise thePm(true).then(function(result){ console.log(result); // it prints &#39;resolve!&#39; }, function (err){ console.log(err); // it prints &#39;reject!&#39; } ) . Promise example 2 | . // before Promise applied function getData(callbackFunc) { $.get(&#39;http://localhost:8081/test&#39;, function(response) { callbackFunc(response); // received the data from server, and pass to callback function }); } getData(function(result){ console.log(result); // response above is sent to this &#39;result&#39; }) // after Promise applied function getData(callbackFunc) { return new Promise(function(resolve, reject){ // new Promise() is added $.get(&#39;http://localhost:8081/test&#39;, function(response) { resolve(response); // once data is received, call resolve() method. }); }); } getData().then (function(result){ //&#39;then&#39; is added. once getData() above is completed, then- is executed. console.log(result); // response above is sent to this &#39;result&#39; }) .",
    "url": "http://localhost:4000/docs/14_Javascript/05_js_es6/",
    "relUrl": "/docs/14_Javascript/05_js_es6/"
  }
  ,"17": {
    "title": "Lambda",
    "content": "Java - Lambda . . Lambda | . Lambda . what is Lambda? - an anonymous function with no name. . in this example, Lambda’s target type is ‘Adder’. all anonymouse function with no name have interace type. . //Lambda&#39;s target interface should have only one method. //@FunctionalInterface enforces it. @FuntionalInterface interface Adder { int add(int n); } . class Calculator { public static void main(String[] args) { int n = 2; //before Lambda expression Adder ad = new Adder(){ @Override // initiating with overriding at the same time int add(int n){ return n+ 1;} // Lambda&#39;s param (&#39;n&#39; in this case) is considered as &#39;final&#39;, can&#39;t change it. } //Lambda 1 Adder ad = (int n) -&gt; {return n + 1;}; //Lambda 2 Adder ad = (n) -&gt; {return n + 1;}; //it knows param type so we can skip it //Lambda 3 Adder ad = n -&gt; n + 1; // if logic is one line, can skip bracket. System.out.println(ad.add(n)); // 3 } . There are many registered Lambda interfaces (provided name/param/return types) so we can resue them. . // example - IntBinaryOperator (get two int, return bigger value) // before Lambda expression IntBinaryOperator op = (int x, int y) -&gt; { if(x &gt; y) return x; return y; }; // Lambda 1 IntBinaryOperator op1 = (int x, int y) -&gt; {return Math.max(x, y);}; // Lambda 2 IntBinaryOperator op2 = (x, y) -&gt; Math.max(x, y); // Lambda 3 IntBinaryOperator op = Math::max; // this Lambda refers existing interface (with Math.max) so can skip those params (x,y) System.out.println(op.applyAsInt(3, 7)); // 7 .",
    "url": "http://localhost:4000/docs/10_Java/08_lambda/",
    "relUrl": "/docs/10_Java/08_lambda/"
  }
  ,"18": {
    "title": "Security",
    "content": "Java - Security . . XXS (Sross Site Scripting) Attach | XXS (Sross Site Scripting) Attach . Users enter the input value with HTML tag (with ‘&lt; script //&gt;’) that can be executed to attack. To dissable, it either needs to ‘escape’ the HTML tag or assigns the whitelist of allowed inputs and prohibits rest of inputs. . these methods can be implemented either on the client-side(front end) or the server-side (back end). . Java (server-side) implementation example . add apache-commons-text dependency | . &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-text&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; . result | . String escaped = StringEscapeUtils.escapeHtml4(param); // when param is &#39;&lt;script&gt;&#39;, it is transformed to *&amp;lt;script&amp;gt;* .",
    "url": "http://localhost:4000/docs/10_Java/10_java_security/",
    "relUrl": "/docs/10_Java/10_java_security/"
  }
  ,"19": {
    "title": "JSON",
    "content": "Javascript - JSON . . JSON(JavaScript Object Notation) Methods | | JSON(JavaScript Object Notation) . Methods . JSON.stringify(value) . it turns a JavaScript object into JSON text in a String format. . JSON.parse(value) . it turns JSON text into _Javascript object .",
    "url": "http://localhost:4000/docs/14_Javascript/10_js_json/",
    "relUrl": "/docs/14_Javascript/10_js_json/"
  }
  ,"21": {
    "title": "Git and CL",
    "content": "Git and Command Line . All about Git and Command Line. .",
    "url": "http://localhost:4000/docs/20_GitCL",
    "relUrl": "/docs/20_GitCL"
  }
  ,"22": {
    "title": "Home",
    "content": ". (2017 Dec - in Dallax, TX) . GIN YOUNG ANDREW . . [Download Resume] . Technical Skills . Java . Javascript . , JSP . JSF . JSTL . JDBC . HTML5 . CSS3 . Bootstrap . Vue.js . jQuery . XML . JSON . Spring MVC/Boot . JPA . JUnit . Mockito . H2 . MySQL . Oracle SQL . Git . CVS . Ant . Maven . SOAP . Microservices . . Work Experience . Software Analyst at GE Aviation (in contract) – Cincinnati, OH (06/2018 to Present) Debug, fix, and upgrade the intranet applications written in JSF and jBoss and keep production environment operational | Analyze codes of Spring projects including PL/SQL, XML scripts to find the programming defect and data mis-integrity and ensure continuous stable operation of the applications | . | Web Developer at Revature – Reston, VA (01/2018 to 05/2018) Develop web applications including test codes by using Java, Angular 4, Oracle SQL, and Microservice | Contribute as a full stack developer for an optimal REST configurations by practicing SOAP, REST API, WSDL, Service Oriented Architecture (SOA) | Construct a testing framework using JUnit to ensure the continous flawless code | . | Full Stack Developer at Digital One - Seoul, South Korea (03/2016 to 12/2016) Build the internal scheduler application by using Apache Velocity for Osstem Implant company | Build the point management application Clip by using Kakao Geography API , MySQL, and Spring MVC framework | . | Site manager at Bomnib - WFH (2005 to present) Maintain Bomnib, a family-owned business owned by my parents. it’s built on the e-commerce platform Cafe24 since 2005. Update the front-end code to make it fit into the mobile devices and implement the user convenient functionalities | . | . .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"23": {
    "title": "Java",
    "content": "Java . All about Java .",
    "url": "http://localhost:4000/docs/10_Java",
    "relUrl": "/docs/10_Java"
  }
  ,"24": {
    "title": "Javascript",
    "content": "Javascript . All about Javascript and ES6 .",
    "url": "http://localhost:4000/docs/14_Javascript",
    "relUrl": "/docs/14_Javascript"
  }
  ,"25": {
    "title": "Others",
    "content": "Others . Anything I learn .",
    "url": "http://localhost:4000/docs/30_Others",
    "relUrl": "/docs/30_Others"
  }
  ,"26": {
    "title": "Spring",
    "content": "Spring . All about Spring framework .",
    "url": "http://localhost:4000/docs/18_Spring",
    "relUrl": "/docs/18_Spring"
  }
  ,"27": {
    "title": "Vue JS",
    "content": "Vue . All about Vue.js .",
    "url": "http://localhost:4000/docs/15_Vue",
    "relUrl": "/docs/15_Vue"
  }
  
}